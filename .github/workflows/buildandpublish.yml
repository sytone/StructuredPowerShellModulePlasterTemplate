# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install dependencies
      shell: pwsh 
      run: |
        # Install-PackageProvider -Name PowerShellGet -Scope CurrentUser -Force | Out-Null
        Install-Module -Name Pester -Scope CurrentUser -Force
        Install-Module -Name posh-git -Scope CurrentUser -Force
        Install-Module -Name platyPS -Scope CurrentUser -Force
        Install-Module -Name Plaster -Scope CurrentUser -Force

    - name: Run Plaster
      shell: pwsh 
      run: |
        dir env:\
        mkdir ..\mycoolmodule
        Invoke-Plaster -TemplatePath .\ -DestinationPath ..\mycoolmodule -ModuleName "TEST" -ModuleDesc "TESTDESC" -ModuleVersion "0.0.1" -ModuleAuthor "Fred Smith" -ModuleEmail "fred@smith.com" -FunctionFolders 'Public','Private','Classes' -Pester "Yes" -Appveyor 'No' -Format 'Yes' -Help 'Yes' -Editor 'VSCode'
        Get-ChildItem ..\mycoolmodule


    - name: Run Pester
      shell: pwsh 
      run: |
        $Timestamp = Get-date -uformat "%Y%m%d-%H%M%S"
        $PSVersion = $PSVersionTable.PSVersion.Major
        $TestFile = "TestResults_PS$PSVersion`_$TimeStamp.xml"
        $Verbose = @{}
        Push-Location ..\mycoolmodule
        #if($env:APPVEYOR_REPO_BRANCH -and $env:APPVEYOR_REPO_BRANCH -notlike "master")
        #{
        #    $Verbose.add("Verbose",$True)
        #}              
        
        Import-Module Pester -force
        Invoke-Pester @Verbose -Path ".\Tests" -OutputFormat NUnitXml -OutputFile "..\StructuredPowerShellModulePlasterTemplate\$TestFile" -PassThru |
            Export-Clixml -Path ".\PesterResults_PS$PSVersion`_$Timestamp.xml"
        Pop-Location
        
    - name: NUnit Reporter
      uses: MirrorNG/nunit-reporter@v1.0.5
      with:
        # github token
        access-token: ${{ secrets.GITHUB_TOKEN }}
        # glob to junit xml files
        path: PesterResults*.xml
        # max number of failed tests to include
        numFailures: 30
#  - ps: . .\build.ps1
